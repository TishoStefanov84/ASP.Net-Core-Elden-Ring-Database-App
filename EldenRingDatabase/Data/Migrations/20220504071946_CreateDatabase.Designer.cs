// <auto-generated />
using System;
using EldenRingDatabase.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EldenRingDatabase.Migrations
{
    [DbContext(typeof(EldenRingDbContext))]
    [Migration("20220504071946_CreateDatabase")]
    partial class CreateDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.16")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DamageTypeWeapon", b =>
                {
                    b.Property<int>("DamageTypesId")
                        .HasColumnType("int");

                    b.Property<int>("WeaponsId")
                        .HasColumnType("int");

                    b.HasKey("DamageTypesId", "WeaponsId");

                    b.HasIndex("WeaponsId");

                    b.ToTable("DamageTypeWeapon");
                });

            modelBuilder.Entity("EldenRingDatabase.Data.Models.Ammunition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AmmunitionTypeId")
                        .HasColumnType("int");

                    b.Property<int>("AttackStatsId")
                        .HasColumnType("int");

                    b.Property<int>("DamageTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EquipmentId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AmmunitionTypeId");

                    b.HasIndex("AttackStatsId");

                    b.HasIndex("DamageTypeId");

                    b.HasIndex("EquipmentId");

                    b.ToTable("Ammunitions");
                });

            modelBuilder.Entity("EldenRingDatabase.Data.Models.AmmunitionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("AmmunitionTypes");
                });

            modelBuilder.Entity("EldenRingDatabase.Data.Models.ArmorSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArmorStatsId")
                        .HasColumnType("int");

                    b.Property<int>("ChestArmorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GauntletsId")
                        .HasColumnType("int");

                    b.Property<int>("HelmId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LegArmorId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Weight")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("Id");

                    b.HasIndex("ArmorStatsId");

                    b.HasIndex("ChestArmorId");

                    b.HasIndex("GauntletsId");

                    b.HasIndex("HelmId");

                    b.HasIndex("LegArmorId");

                    b.ToTable("ArmorSets");
                });

            modelBuilder.Entity("EldenRingDatabase.Data.Models.ArmorStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DmgNegationId")
                        .HasColumnType("int");

                    b.Property<int>("ResistanceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DmgNegationId");

                    b.HasIndex("ResistanceId");

                    b.ToTable("ArmorStats");
                });

            modelBuilder.Entity("EldenRingDatabase.Data.Models.AttackStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Crit")
                        .HasColumnType("int");

                    b.Property<int>("Fire")
                        .HasColumnType("int");

                    b.Property<int>("Holy")
                        .HasColumnType("int");

                    b.Property<int?>("Inc")
                        .HasColumnType("int");

                    b.Property<int>("Ligt")
                        .HasColumnType("int");

                    b.Property<int>("Mag")
                        .HasColumnType("int");

                    b.Property<int>("Phy")
                        .HasColumnType("int");

                    b.Property<int?>("Sor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AttackStats");
                });

            modelBuilder.Entity("EldenRingDatabase.Data.Models.CharacterClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Arcane")
                        .HasColumnType("int");

                    b.Property<int>("ArmorSetId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Dexterity")
                        .HasColumnType("int");

                    b.Property<int>("Endurance")
                        .HasColumnType("int");

                    b.Property<int>("Faith")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Intelligence")
                        .HasColumnType("int");

                    b.Property<int>("Mind")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RuneLevel")
                        .HasColumnType("int");

                    b.Property<int>("Strength")
                        .HasColumnType("int");

                    b.Property<int>("Vigor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArmorSetId");

                    b.ToTable("CharacterClasses");
                });

            modelBuilder.Entity("EldenRingDatabase.Data.Models.ChestArmor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArmorStatsId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Weight")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("Id");

                    b.HasIndex("ArmorStatsId");

                    b.ToTable("ChestArmors");
                });

            modelBuilder.Entity("EldenRingDatabase.Data.Models.DamageType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("DamageTypes");
                });

            modelBuilder.Entity("EldenRingDatabase.Data.Models.DmgNegation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Fire")
                        .HasColumnType("int");

                    b.Property<int>("Holy")
                        .HasColumnType("int");

                    b.Property<int>("Ligt")
                        .HasColumnType("int");

                    b.Property<int>("Magic")
                        .HasColumnType("int");

                    b.Property<int>("Phy")
                        .HasColumnType("int");

                    b.Property<int>("VSPierce")
                        .HasColumnType("int");

                    b.Property<int>("VSSlash")
                        .HasColumnType("int");

                    b.Property<int>("VSStrike")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DmgNegations");
                });

            modelBuilder.Entity("EldenRingDatabase.Data.Models.Equipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CharacterClassId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharacterClassId");

                    b.ToTable("Equipment");
                });

            modelBuilder.Entity("EldenRingDatabase.Data.Models.Gauntlets", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArmorStatsId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Weight")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("Id");

                    b.HasIndex("ArmorStatsId");

                    b.ToTable("Gauntlets");
                });

            modelBuilder.Entity("EldenRingDatabase.Data.Models.GuardStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Boost")
                        .HasColumnType("int");

                    b.Property<int>("Fire")
                        .HasColumnType("int");

                    b.Property<int>("Holy")
                        .HasColumnType("int");

                    b.Property<int>("Ligt")
                        .HasColumnType("int");

                    b.Property<int>("Mag")
                        .HasColumnType("int");

                    b.Property<int>("Phy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("GuardStats");
                });

            modelBuilder.Entity("EldenRingDatabase.Data.Models.Helm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArmorStatsId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Weight")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("Id");

                    b.HasIndex("ArmorStatsId");

                    b.ToTable("Helms");
                });

            modelBuilder.Entity("EldenRingDatabase.Data.Models.LegArmor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArmorStatsId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Weight")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("Id");

                    b.HasIndex("ArmorStatsId");

                    b.ToTable("LegArmor");
                });

            modelBuilder.Entity("EldenRingDatabase.Data.Models.MagicSpell", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Effect")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EquipmentId")
                        .HasColumnType("int");

                    b.Property<int>("FPCost")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsLegendary")
                        .HasColumnType("bit");

                    b.Property<int>("MagicSpellTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RequiresId")
                        .HasColumnType("int");

                    b.Property<int>("SlotUsed")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("MagicSpellTypeId");

                    b.HasIndex("RequiresId");

                    b.ToTable("MagicSpells");
                });

            modelBuilder.Entity("EldenRingDatabase.Data.Models.MagicSpellType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MagicSpellTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("MagicSpellType");
                });

            modelBuilder.Entity("EldenRingDatabase.Data.Models.Requires", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Arcane")
                        .HasColumnType("int");

                    b.Property<int>("Dexterity")
                        .HasColumnType("int");

                    b.Property<int>("Endurance")
                        .HasColumnType("int");

                    b.Property<int>("Faith")
                        .HasColumnType("int");

                    b.Property<int>("Intelligence")
                        .HasColumnType("int");

                    b.Property<int>("Strength")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Requires");
                });

            modelBuilder.Entity("EldenRingDatabase.Data.Models.Resistance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Focus")
                        .HasColumnType("int");

                    b.Property<int>("Immunity")
                        .HasColumnType("int");

                    b.Property<int>("Poise")
                        .HasColumnType("int");

                    b.Property<int>("Robustness")
                        .HasColumnType("int");

                    b.Property<int>("Vitality")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Resistances");
                });

            modelBuilder.Entity("EldenRingDatabase.Data.Models.Scaling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Arcane")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Dexterity")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Endurance")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Faith")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Intelligence")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Strength")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.HasKey("Id");

                    b.ToTable("Scalings");
                });

            modelBuilder.Entity("EldenRingDatabase.Data.Models.Shield", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DamageTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EquipmentId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ShieldTypeId")
                        .HasColumnType("int");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.Property<int>("StatsId")
                        .HasColumnType("int");

                    b.Property<string>("Weight")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("Id");

                    b.HasIndex("DamageTypeId");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("ShieldTypeId");

                    b.HasIndex("SkillId");

                    b.HasIndex("StatsId");

                    b.ToTable("Shields");
                });

            modelBuilder.Entity("EldenRingDatabase.Data.Models.ShieldType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ShieldTypes");
                });

            modelBuilder.Entity("EldenRingDatabase.Data.Models.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FPCost")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("EldenRingDatabase.Data.Models.Stats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttackStatsId")
                        .HasColumnType("int");

                    b.Property<int>("GuardStatsId")
                        .HasColumnType("int");

                    b.Property<int>("RequiresId")
                        .HasColumnType("int");

                    b.Property<int>("ScalingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttackStatsId");

                    b.HasIndex("GuardStatsId");

                    b.HasIndex("RequiresId");

                    b.HasIndex("ScalingId");

                    b.ToTable("Stats");
                });

            modelBuilder.Entity("EldenRingDatabase.Data.Models.StatusEffect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Effect")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("StatusEffects");
                });

            modelBuilder.Entity("EldenRingDatabase.Data.Models.Talisman", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripption")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Weight")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("Id");

                    b.ToTable("Talismans");
                });

            modelBuilder.Entity("EldenRingDatabase.Data.Models.TalismanEffect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Effect")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TalismanId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TalismanId");

                    b.ToTable("TalismanEffects");
                });

            modelBuilder.Entity("EldenRingDatabase.Data.Models.Weapon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EquipmentId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsLegendary")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.Property<int>("StatsId")
                        .HasColumnType("int");

                    b.Property<int>("StatusEffectId")
                        .HasColumnType("int");

                    b.Property<int>("WeaponTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Weight")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("SkillId");

                    b.HasIndex("StatsId");

                    b.HasIndex("StatusEffectId");

                    b.HasIndex("WeaponTypeId");

                    b.ToTable("Weapons");
                });

            modelBuilder.Entity("EldenRingDatabase.Data.Models.WeaponType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("WeaponTypes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DamageTypeWeapon", b =>
                {
                    b.HasOne("EldenRingDatabase.Data.Models.DamageType", null)
                        .WithMany()
                        .HasForeignKey("DamageTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EldenRingDatabase.Data.Models.Weapon", null)
                        .WithMany()
                        .HasForeignKey("WeaponsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EldenRingDatabase.Data.Models.Ammunition", b =>
                {
                    b.HasOne("EldenRingDatabase.Data.Models.AmmunitionType", "AmmunitionType")
                        .WithMany("Ammunitions")
                        .HasForeignKey("AmmunitionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EldenRingDatabase.Data.Models.AttackStats", "AttackStats")
                        .WithMany()
                        .HasForeignKey("AttackStatsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EldenRingDatabase.Data.Models.DamageType", "DamageType")
                        .WithMany("Ammunitions")
                        .HasForeignKey("DamageTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EldenRingDatabase.Data.Models.Equipment", null)
                        .WithMany("Ammunitions")
                        .HasForeignKey("EquipmentId");

                    b.Navigation("AmmunitionType");

                    b.Navigation("AttackStats");

                    b.Navigation("DamageType");
                });

            modelBuilder.Entity("EldenRingDatabase.Data.Models.ArmorSet", b =>
                {
                    b.HasOne("EldenRingDatabase.Data.Models.ArmorStats", "ArmorStats")
                        .WithMany()
                        .HasForeignKey("ArmorStatsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EldenRingDatabase.Data.Models.ChestArmor", "ChestArmor")
                        .WithMany()
                        .HasForeignKey("ChestArmorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EldenRingDatabase.Data.Models.Gauntlets", "Gauntlets")
                        .WithMany()
                        .HasForeignKey("GauntletsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EldenRingDatabase.Data.Models.Helm", "Helm")
                        .WithMany()
                        .HasForeignKey("HelmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EldenRingDatabase.Data.Models.LegArmor", "LegArmor")
                        .WithMany()
                        .HasForeignKey("LegArmorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArmorStats");

                    b.Navigation("ChestArmor");

                    b.Navigation("Gauntlets");

                    b.Navigation("Helm");

                    b.Navigation("LegArmor");
                });

            modelBuilder.Entity("EldenRingDatabase.Data.Models.ArmorStats", b =>
                {
                    b.HasOne("EldenRingDatabase.Data.Models.DmgNegation", "DmgNegation")
                        .WithMany()
                        .HasForeignKey("DmgNegationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EldenRingDatabase.Data.Models.Resistance", "Resistance")
                        .WithMany()
                        .HasForeignKey("ResistanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DmgNegation");

                    b.Navigation("Resistance");
                });

            modelBuilder.Entity("EldenRingDatabase.Data.Models.CharacterClass", b =>
                {
                    b.HasOne("EldenRingDatabase.Data.Models.ArmorSet", "ArmorSet")
                        .WithMany()
                        .HasForeignKey("ArmorSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArmorSet");
                });

            modelBuilder.Entity("EldenRingDatabase.Data.Models.ChestArmor", b =>
                {
                    b.HasOne("EldenRingDatabase.Data.Models.ArmorStats", "ArmorStats")
                        .WithMany()
                        .HasForeignKey("ArmorStatsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArmorStats");
                });

            modelBuilder.Entity("EldenRingDatabase.Data.Models.Equipment", b =>
                {
                    b.HasOne("EldenRingDatabase.Data.Models.CharacterClass", null)
                        .WithMany("Equipment")
                        .HasForeignKey("CharacterClassId");
                });

            modelBuilder.Entity("EldenRingDatabase.Data.Models.Gauntlets", b =>
                {
                    b.HasOne("EldenRingDatabase.Data.Models.ArmorStats", "ArmorStats")
                        .WithMany()
                        .HasForeignKey("ArmorStatsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArmorStats");
                });

            modelBuilder.Entity("EldenRingDatabase.Data.Models.Helm", b =>
                {
                    b.HasOne("EldenRingDatabase.Data.Models.ArmorStats", "ArmorStats")
                        .WithMany()
                        .HasForeignKey("ArmorStatsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArmorStats");
                });

            modelBuilder.Entity("EldenRingDatabase.Data.Models.LegArmor", b =>
                {
                    b.HasOne("EldenRingDatabase.Data.Models.ArmorStats", "ArmorStats")
                        .WithMany()
                        .HasForeignKey("ArmorStatsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArmorStats");
                });

            modelBuilder.Entity("EldenRingDatabase.Data.Models.MagicSpell", b =>
                {
                    b.HasOne("EldenRingDatabase.Data.Models.Equipment", null)
                        .WithMany("MagicSpells")
                        .HasForeignKey("EquipmentId");

                    b.HasOne("EldenRingDatabase.Data.Models.MagicSpellType", "MagicSpellType")
                        .WithMany("MagicSpells")
                        .HasForeignKey("MagicSpellTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EldenRingDatabase.Data.Models.Requires", "Requires")
                        .WithMany()
                        .HasForeignKey("RequiresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MagicSpellType");

                    b.Navigation("Requires");
                });

            modelBuilder.Entity("EldenRingDatabase.Data.Models.Shield", b =>
                {
                    b.HasOne("EldenRingDatabase.Data.Models.DamageType", "DamageType")
                        .WithMany("Shields")
                        .HasForeignKey("DamageTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EldenRingDatabase.Data.Models.Equipment", null)
                        .WithMany("Shields")
                        .HasForeignKey("EquipmentId");

                    b.HasOne("EldenRingDatabase.Data.Models.ShieldType", "ShieldType")
                        .WithMany("Shields")
                        .HasForeignKey("ShieldTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EldenRingDatabase.Data.Models.Skill", "Skill")
                        .WithMany("Shields")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EldenRingDatabase.Data.Models.Stats", "Stats")
                        .WithMany()
                        .HasForeignKey("StatsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DamageType");

                    b.Navigation("ShieldType");

                    b.Navigation("Skill");

                    b.Navigation("Stats");
                });

            modelBuilder.Entity("EldenRingDatabase.Data.Models.Stats", b =>
                {
                    b.HasOne("EldenRingDatabase.Data.Models.AttackStats", "AttackStats")
                        .WithMany("Stats")
                        .HasForeignKey("AttackStatsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EldenRingDatabase.Data.Models.GuardStats", "GuardStats")
                        .WithMany("Stats")
                        .HasForeignKey("GuardStatsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EldenRingDatabase.Data.Models.Requires", "Requires")
                        .WithMany("Stats")
                        .HasForeignKey("RequiresId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EldenRingDatabase.Data.Models.Scaling", "Scaling")
                        .WithMany("Stats")
                        .HasForeignKey("ScalingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AttackStats");

                    b.Navigation("GuardStats");

                    b.Navigation("Requires");

                    b.Navigation("Scaling");
                });

            modelBuilder.Entity("EldenRingDatabase.Data.Models.TalismanEffect", b =>
                {
                    b.HasOne("EldenRingDatabase.Data.Models.Talisman", "Talisman")
                        .WithMany("TalismanEffects")
                        .HasForeignKey("TalismanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Talisman");
                });

            modelBuilder.Entity("EldenRingDatabase.Data.Models.Weapon", b =>
                {
                    b.HasOne("EldenRingDatabase.Data.Models.Equipment", null)
                        .WithMany("Weapons")
                        .HasForeignKey("EquipmentId");

                    b.HasOne("EldenRingDatabase.Data.Models.Skill", "Skill")
                        .WithMany("Weapons")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EldenRingDatabase.Data.Models.Stats", "Stats")
                        .WithMany()
                        .HasForeignKey("StatsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EldenRingDatabase.Data.Models.StatusEffect", "StatusEffect")
                        .WithMany("Weapons")
                        .HasForeignKey("StatusEffectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EldenRingDatabase.Data.Models.WeaponType", "WeaponType")
                        .WithMany("Weapons")
                        .HasForeignKey("WeaponTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("Stats");

                    b.Navigation("StatusEffect");

                    b.Navigation("WeaponType");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EldenRingDatabase.Data.Models.AmmunitionType", b =>
                {
                    b.Navigation("Ammunitions");
                });

            modelBuilder.Entity("EldenRingDatabase.Data.Models.AttackStats", b =>
                {
                    b.Navigation("Stats");
                });

            modelBuilder.Entity("EldenRingDatabase.Data.Models.CharacterClass", b =>
                {
                    b.Navigation("Equipment");
                });

            modelBuilder.Entity("EldenRingDatabase.Data.Models.DamageType", b =>
                {
                    b.Navigation("Ammunitions");

                    b.Navigation("Shields");
                });

            modelBuilder.Entity("EldenRingDatabase.Data.Models.Equipment", b =>
                {
                    b.Navigation("Ammunitions");

                    b.Navigation("MagicSpells");

                    b.Navigation("Shields");

                    b.Navigation("Weapons");
                });

            modelBuilder.Entity("EldenRingDatabase.Data.Models.GuardStats", b =>
                {
                    b.Navigation("Stats");
                });

            modelBuilder.Entity("EldenRingDatabase.Data.Models.MagicSpellType", b =>
                {
                    b.Navigation("MagicSpells");
                });

            modelBuilder.Entity("EldenRingDatabase.Data.Models.Requires", b =>
                {
                    b.Navigation("Stats");
                });

            modelBuilder.Entity("EldenRingDatabase.Data.Models.Scaling", b =>
                {
                    b.Navigation("Stats");
                });

            modelBuilder.Entity("EldenRingDatabase.Data.Models.ShieldType", b =>
                {
                    b.Navigation("Shields");
                });

            modelBuilder.Entity("EldenRingDatabase.Data.Models.Skill", b =>
                {
                    b.Navigation("Shields");

                    b.Navigation("Weapons");
                });

            modelBuilder.Entity("EldenRingDatabase.Data.Models.StatusEffect", b =>
                {
                    b.Navigation("Weapons");
                });

            modelBuilder.Entity("EldenRingDatabase.Data.Models.Talisman", b =>
                {
                    b.Navigation("TalismanEffects");
                });

            modelBuilder.Entity("EldenRingDatabase.Data.Models.WeaponType", b =>
                {
                    b.Navigation("Weapons");
                });
#pragma warning restore 612, 618
        }
    }
}
